")
cat(markdownToHTML(text="
```
preformated text here without having to indent
first line.
```
"))
install.packages('RJSONIO')
help(package = 'RJSONIO')
x = fromJSON('{
"info": {
"name":    "Test Your Knowledge!!",
"main":    "<p>Think you're smart enough to be on Jeopardy? Find out with this super crazy knowledge quiz!</p>",
"results": "<h5>Learn More</h5><p>Etiam scelerisque, nunc ac egestas consequat, odio nibh euismod nulla, eget auctor orci nibh vel nisi. Aliquam erat volutpat. Mauris vel neque sit amet nunc gravida congue sed sit amet purus.</p>",
"level1":  "Jeopardy Ready",
"level2":  "Jeopardy Contender",
"level3":  "Jeopardy Amateur",
"level4":  "Jeopardy Newb",
"level5":  "Stay in school, kid..." // no comma here
}')
x = fromJSON('{
"info": {
"name":    "Test Your Knowledge!!",
"main":    "<p>Think you are smart enough to be on Jeopardy? Find out with this super crazy knowledge quiz!</p>",
"results": "<h5>Learn More</h5><p>Etiam scelerisque, nunc ac egestas consequat, odio nibh euismod nulla, eget auctor orci nibh vel nisi. Aliquam erat volutpat. Mauris vel neque sit amet nunc gravida congue sed sit amet purus.</p>",
"level1":  "Jeopardy Ready",
"level2":  "Jeopardy Contender",
"level3":  "Jeopardy Amateur",
"level4":  "Jeopardy Newb",
"level5":  "Stay in school, kid..." // no comma here
}')
library(RJSONIO)
x = fromJSON('{
"info": {
"name":    "Test Your Knowledge!!",
"main":    "<p>Think you are smart enough to be on Jeopardy? Find out with this super crazy knowledge quiz!</p>",
"results": "<h5>Learn More</h5><p>Etiam scelerisque, nunc ac egestas consequat, odio nibh euismod nulla, eget auctor orci nibh vel nisi. Aliquam erat volutpat. Mauris vel neque sit amet nunc gravida congue sed sit amet purus.</p>",
"level1":  "Jeopardy Ready",
"level2":  "Jeopardy Contender",
"level3":  "Jeopardy Amateur",
"level4":  "Jeopardy Newb",
"level5":  "Stay in school, kid..." // no comma here
}')
x
x = fromJSON('{
"info": {
"name":    "Test Your Knowledge!!",
"main":    "<p>Think you are smart enough to be on Jeopardy? Find out with this super crazy knowledge quiz!</p>}}')
x
x = fromJSON('{
"info": {
"name":    "Test Your Knowledge!!",
"main":    "<p>Think you are smart enough to be on Jeopardy? Find out with this super crazy knowledge quiz!</p>"}}')
x
x = fromJSON('{
"info": {
"name":    "Test Your Knowledge!!",
"main":    "<p>Think you are smart enough to be on Jeopardy? Find out with this super crazy knowledge quiz!</p>",
"results": "<h5>Learn More</h5><p>Etiam scelerisque, nunc ac egestas consequat, odio nibh euismod nulla, eget auctor orci nibh vel nisi. Aliquam erat volutpat. Mauris vel neque sit amet nunc gravida congue sed sit amet purus.</p>",
"level1":  "Jeopardy Ready",
"level2":  "Jeopardy Contender",
"level3":  "Jeopardy Amateur",
"level4":  "Jeopardy Newb",
"level5":  "Stay in school, kid..." // no comma here
}}')
x
source('~/.active-rstudio-document')
q1
source('~/.active-rstudio-document')
q1
str(q1)
qplot(wt, mpg, data = mtcars)
qplot(wt, mpg, data = mtcars) + opts(plot.background = theme_blank(fill = NA))
qplot(wt, mpg, data = mtcars) + opts(plot.background = theme_rect(fill = NA))
qplot(wt, mpg, data = mtcars)
qplot(wt, mpg, data = mtcars) + opts(plot.background = theme_rect(fill = NA))
diets <- read.delim("/var/folders/LQ/LQU9qgwRE7urFCmDeiUPHE+++TI/-Tmp-//Rtmp287AbB/dataac059602202")
View(diets)
qplot(diet, weight.loss, geom = 'boxplot')
qplot(diets, weight.loss, geom = 'boxplot')
qplot(diet, weight.loss, data = diets, geom = 'boxplot')
dir()
file.edit('RProfile')
unlink('RProfile')
file.edit('.RProfile')
trellis.par.set(theme = theEconomist.theme(box = 'transparent'))
lattice.options(theEconomist.opts())
View
view
View(diets)
View(faithful)
fix(faithful)
bwplot(~ eruptions, data = faithful)
library(markdown)
print(markdownToHTML('1. this\n 2.that'))
print(markdownToHTML(text = '1. this\n 2.that'))
print(markdownToHTML(text = '1. this and \n again\n 2.that'))
print(markdownToHTML(text = '* this and \n again\n * that'))
? markdown
dir()
library(TeachingDemos)
help(package = 'TeachingDemos')
dice(1)
plot(dice(1))
plot(dice(1, 2))
plot.dice( expand.grid(1:6,1:6), layout=c(6,6) )
library(openintro)
help(package = 'openintro')
densityPlot(run10$time, histo='faded', breaks=15, main='Run time')
densityPlot(run10$time, histo='faded', breaks=15, main='Run time', col = 'green')
densityPlot(run10$time, histo='faded', breaks=15, main='Run time', col = 'red')
x <- rnorm(100)
qplot(x, geom = 'blank') +
geom_histogram(aes(y = ..density..)) +
geom_density(col = 'red')
source('~/.active-rstudio-document')
qplot(x, geom = 'blank') +
geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.5) +
geom_density(col = 'red')
qplot(x, geom = 'blank') +
geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.9) +
geom_density(col = 'red')
qplot(x, geom = 'blank') +
geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.1) +
geom_density(col = 'red')
qplot(x, geom = 'blank') +
geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.4) +
geom_density(col = 'red')
qplot(x, geom = 'blank') +
geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2) +
geom_density(col = 'red')
densityPlot(run10$time, histo='faded', breaks=15, main='Run time')
qplot(x, geom = 'blank') +
geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = 'red') +
geom_density(col = 'red')
qplot(x, geom = 'blank') +
geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = 'gray') +
geom_density(col = 'red')
densityPlot(run10$time, histo='faded', breaks=15, main='Run time', col = 'red')
qplot(x, geom = 'blank') +
geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = alpha(red, 0.3)) +
geom_density(col = 'red')
library(scales)
qplot(x, geom = 'blank') +
geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = alpha(red, 0.3)) +
geom_density(col = 'red')
col2rgb('red')
qplot(x, geom = 'blank') +
geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = alpha(red, 0.3)) +
geom_density(col = 'red')
qplot(x, geom = 'blank') +
geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2) +
geom_density(col = 'red')
qplot(x, geom = 'blank') +
geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = 'gray70') +
geom_density(col = 'red')
qplot(time, data = run10, geom = 'blank') + geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = 'gray70') +
geom_density(col = 'red')
qplot(time, data = run10, geom = 'blank') + geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = 'gray70') +
geom_density(col = 'red') + geom_hline(yintercept = 0)
qplot(time, data = run10, geom = 'blank') + geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = 'gray70') +
geom_density(col = 'red') + geom_hline(yintercept = 0, col = 'gray')
qplot(time, data = run10, geom = 'blank') + geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = 'gray70') +
geom_density(col = 'red', lty = 2) + geom_hline(yintercept = 0, col = 'gray')
qplot(time, data = run10, geom = 'blank') + geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = 'gray70') +
geom_density(col = 'red', size = 2) + geom_hline(yintercept = 0, col = 'gray')
qplot(time, data = run10, geom = 'blank') + geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = 'gray70') +
geom_density(col = 'red', lty = 2) + geom_hline(yintercept = 0, col = 'gray')
qplot(time, data = run10, geom = 'blank') + geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = 'gray70') +
geom_density(col = 'red', lty = 2, size = 1.5) + geom_hline(yintercept = 0, col = 'gray')
qplot(time, data = run10, geom = 'blank') + geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = 'gray70') +
geom_density(col = 'red', size = 1.5) + geom_hline(yintercept = 0, col = 'gray')
qplot(time, data = run10, geom = 'blank') + geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = 'gray70') +
geom_density(col = 'red', size = 1.5) + geom_hline(yintercept = 0, col = 'gray', size = 1.5)
qplot(time, data = run10, geom = 'blank') + geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = 'gray70') +
geom_density(col = 'red', size = 1.5) + geom_hline(yintercept = 0, col = 'gray80', size = 1.5)
qplot(time, data = run10, geom = 'blank') + geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = 'gray70') +
geom_density(col = 'red', size = 1.5) + geom_hline(yintercept = 0, col = 'gray90', size = 1.5)
qplot(time, data = run10, geom = 'blank') + geom_histogram(aes(y = ..density..), fill = 'red', alpha = 0.2, col = 'gray70') +
geom_density(col = 'red', size = 1.5) + geom_hline(yintercept = 0, col = 'black')
histogram(~ time, run10)
histogram(~ time, run10, nint = 5)
histogram(~ time, run10, nint = 6)
histogram(~ time, run10, nint = 7)
histogram(~ time, run10, nint = 8)
histogram(~ time, run10, nint = 9)
histogram(~ time, run10, nint = 20)
histogram(~ time, run10, nint = 40)
histogram(~ time, run10, nint = 60)
histogram(~ time, run10, nint = 80)
histogram(~ time, run10, nint = 100)
histogram(~ time, run10, nint = 120)
plot.dice(dice(1, 2))
plot.dice(dice(4, 2))
plot.dice(dice(100, 2))
help(package = 'TeachingDemos')
citation(package='TeachingDemos')
library(prob)
tosscoin(2)
tosscoin(2, makespace = T)
x <- tosscoin(2, makespace = T)
x
help(package = 'prob')
S <- iidspace(c('H', 'T'), ntrials = 2, prob = c(0.3, 0.7))
S
addrv(S, Z = (X1 == 'H') + (X2 == 'H'))
S
S <- addrv(S, Z = (X1 == 'H') + (X2 == 'H'))
S
qplot(Z, probs, data = S)
qplot(Z, probs, data = S, geom = 'bar')
qplot(Z, probs, data = S, geom = 'bar', stat = 'identity')
str(S)
barchart(probs ~ Z, data = S)
S
qplot(Z, data = S)
qplot(Z, data = S) + geom_bar(aes(y = probs))
S <- iidspace(c('H', 'T'), ntrials = 2, prob = c(0.3, 0.7))
S <- transform(S, Z = (X1 == "H") + (X2 == "H"))
qplot(Z, probs, data = S)
qplot(Z, probs, data = S, geom = 'bar')
qplot(Z, probs, data = S, geom = 'bar', stat = 'identiy')
qplot(Z, probs, data = S, geom = 'bar', stat = 'identity')
barplot(probs ~ Z, data = S)
barchart(probs ~ Z, data = S)
trellis.par.set(theme = theEconomist.theme(box = 'transparent'))
lattice.options(theEconomist.opts())
barplot(probs ~ Z, data = S)
barchart(probs ~ Z, data = S)
barchart(probs ~ Z, data = S, horizontal = F)
S
S <- iidspace(c('H', 'T'), ntrials = 3, prob = c(0.3, 0.7))
S <- transform(S, Z = (X1 == "H") + (X2 == "H"))
barchart(probs ~ Z, data = S)
barchart(probs ~ Z, data = S, horizontal = F)
S
str(Z)
str(S)
barchart(probs ~ as.character(Z), data = S, horizontal = F)
S <- iidspace(c('H', 'T'), ntrials = 3, prob = c(0.3, 0.7))
S <- transform(S, Z = as.character((X1 == "H") + (X2 == "H")))
barchart(probs ~ Z, data = S, horizontal = F)
S <- iidspace(c('H', 'T'), ntrials = 3, prob = c(0.3, 0.7))
S <- transform(S, Z = as.character((X1 == "H") + (X2 == "H")))
xtable(S)
library(xtable)
S <- iidspace(c('H', 'T'), ntrials = 3, prob = c(0.3, 0.7))
S <- transform(S, Z = as.character((X1 == "H") + (X2 == "H")))
xtable(S)
? xtable
? print.xtable
S <- iidspace(c('H', 'T'), ntrials = 3, prob = c(0.3, 0.7))
S <- transform(S, Z = as.character((X1 == "H") + (X2 == "H")))
S <- transform(S, X = paste0(X1, X2))
barchart(probs ~ X, data = S, horizontal F)
barchart(probs ~ X, data = S, horizontal = F)
barchart(probs ~ X, data = S, horizontal = F, col = fadeColor('blue'))
barchart(probs ~ X, data = S, horizontal = F, col = fadeColor('blue', 4))
? fadeColor
brewer_pal(4)
brewer_pal(4, 1)
brewer_pal(4, 1)()
brewer_pal('blues', 1)()
brewer_pal(4, 'blues')()
brewer_pal(4, 1)()
brewer_pal(4, 1)
brewer_pal(4, 1)()
brewer_pal(4, 'qual')()
brewer_pal(4, 'div')()
brewer_pal('blues')
brewer_pal('blues')(4)
brewer_pal(1)(4)
brewer_pal(2)(4)
barchart(probs ~ Z, data = S, horizontal = F, col = brewer_pal(2)(4))
barchart(probs ~ Z, data = S, group = X, horizontal = F, col = brewer_pal(2)(4))
barchart(probs ~ Z, data = S, group = X, horizontal = F, col = brewer_pal(2)(4), stack = T)
barchart(probs ~ Z, data = S, horizontal = F, col = brewer_pal(2)(4))
barchart(probs ~ X, data = S, horizontal = F, col =brewer_pal(2)(4))
barchart(probs ~ X, data = S, horizontal = F, col =brewer_pal(2)(3))
barchart(probs ~ X, data = S, horizontal = F,
col =c("#7FC97F", "#BEAED4", "#BEAED4", "#FDC086"))
barchart(probs ~ Z, data = S, horizontal = F,
col =c("#7FC97F", "#BEAED4", "#FDC086"))
str(S)
barchart(probs ~ Z, data = S, horizontal = F,
col = c("#7FC97F", "#7FC97F", "#BEAED4", "#FDC086"))
p1 = barchart(probs ~ Z, data = S, horizontal = F,
col = c("#7FC97F", "#7FC97F", "#BEAED4", "#FDC086"))
p2 = barchart(probs ~ X, data = S, horizontal = F,
col =c("#7FC97F", "#BEAED4", "#BEAED4", "#FDC086"))
library(gridExtra)
grid.arrange(p1, p2, nrow = 1)
p1 = barchart(probs ~ Z, data = S, horizontal = F,
col = c("#7FC97F", "#7FC97F", "#BEAED4", "#FDC086"))
p2 = barchart(probs ~ X, data = S, horizontal = F,
col =c("#7FC97F", "#BEAED4", "#BEAED4", "#FDC086"))
p1
p2
knit2html
HairEyeColor
hair_eye = HairEyeColor[,,'Male']
hair_eye
source('~/.active-rstudio-document')
barchart(hair_eye)
barchart(hair_eye, stack = F, horizontal = T)
barchart(hair_eye, stack = F, horizontal = F)
barchart(hair_eye, stack = F, horizontal = F, col = eye_cols)
barchart(prop.table(hair_eye, 1), stack = F, horizontal = F, col = eye_cols)
hair_eye
str(hair_eye)
names(hair_eye)
attr(hair_eye, 'dimnames')
colnames(hair)eye
colnames(hair_eye)
rownames(hair_eye)
prop.table(hair_eye, 1)
by_eye  <- t(prop.table(hair_eye, 2))
by_eye
source('~/.active-rstudio-document')
barchart(by_hair, stack = T, horizontal = F, col = eye_cols)
hair_eye
prop.table(hair_eye, c(1, 2))
prop.table(hair_eye, 1
)
cars <- c(1, 3, 6, 4, 9)
barchart(cars)
cars <- c(1, 3, 6, 4, 9)
barchart(~cars)
cars
barplot(cars)
barchart(~ cars)
barplot(cars)
barchart(cars)
barchart(cars, horizontal = F)
barchart(cars ~ ., horizontal = F)
barchart(cars ~ , horizontal = F)
barchart(cars ~ 1, horizontal = F)
barchart(cars ~ 1:5, horizontal = F)
rd <- utils:::.getHelpFile(rd_path('possum', 'openintro'))
? rd_path
? openintro
data(cars)
dotPlot(cars$price, cars$type, key=c('large', 'midsize', 'small'), cex=1:3)
help(package = 'openintro')
these <- run10$gender=='M'
dotPlot(run10$time[these], run10$div[these],
col=fadeColor('black', '11'))
par(las=1, mar=c(2,0,0.5,0), mgp=c(3,0.65,0))
X <- seq(-5,5,0.01)
Y <- dt(X, 50)
plot(X, Y, type='l', axes=F, xlim=c(-4,4))
axis(1, at=c(-5, 0, .37/.17, 5), label=expression(0, H[0]*': '*mu*' = 7  ', bar(x)*' = 7.42', 0), cex.axis=1)
these <- which(X*0.17 + 7 >= 7.37)
polygon(c(X[these[1]], X[these],X[rev(these)[1]]), c(0,Y[these],0), col='#CCCCCC', border='#000000BB')
yMax <- max(Y)
text(0, yMax*.4, '0.993', cex=1.2)
arrows(2.56, yMax/2, 2.562, yMax/10, length=0.1)
text(2.56, yMax/2, 'p-value\n 0.007', pos=3, cex=1.2)
#arrows(1.3,0.28, 0.43, 0.28, length=0.07)
#text(-.88, 0.13, '  40%\n(0.40)', cex=0.8)
lines(X, Y)
abline(h=0)
xyplot(Y ~ X)
xyplot(Y ~ X, pch = 16)
xyplot(Y ~ X)
par(mar=c(0, 1, 0, 0), mgp=c(0, 0, 0))
plot(0:1,0:1, type='n', axes=FALSE, ylab='time')
arrows(0, 1, 0, 0, length=0.1)
text(0.1, 0.95, "Stage", cex=1.25, pos=4)
text(0.1, 0.75, "Setup hypotheses", pos=4)
text(0.6, 0.95, "Presumption", cex=1.25, pos=4)
A <- c(0, 0.22, 0.22, 0.32, 0.54, 0.55, 0.61, 0.7)
yA <- c(0.5, 0.7, 0.3, 0.8, 0.6, 0.4, 0.2)
xT <- c(0.1, xA[4])
yTitle <- c(0.95)
par(mar=c(0, 0, 0, 0))
plot(c(0, 1),c(0.17, 1), type='n', axes=FALSE, xlab='', ylab='')
len <- 0.1
lines(xA[1:3], rep(yA[1],3))
text(xT[1], yA[1], "setup trial", pos=3)
lines(xA[3:4], yA[1:2])
arrows(xA[4], yA[2], xA[5], yA[2], len)
lines(xA[3:4], yA[c(1,3)])
arrows(xA[4], yA[3], xA[5], yA[3], len)
text(xT[2], yTitle, "Reality", cex=1.25, pos=4)
text(xT[2], yA[2]+0.05, "innocent", pos=4)
text(xT[2], yA[3]+0.05, "guilty", pos=4)
lines(xA[6:7], yA[c(2,4)])
arrows(xA[7], yA[4], xA[8], yA[4], len)
lines(xA[6:7], yA[c(2,5)])
arrows(xA[7], yA[5], xA[8], yA[5], len)
lines(xA[6:7], yA[c(3,6)])
arrows(xA[7], yA[6], xA[8], yA[6], len)
lines(xA[6:7], yA[c(3,7)])
arrows(xA[7], yA[7], xA[8], yA[7], len)
text(xA[8], yA[4], "not guilty", pos=4)
text(xA[8], yA[5], "guilty (!)", pos=4)
text(xA[8], yA[6], "not guilty (!!)", pos=4)
text(xA[8], yA[7], "guilty", pos=4)
text(xA[8], yTitle, "Court Ruling", pos=4, cex=1.25)
xA <- c(0, 0.22, 0.22, 0.32, 0.54, 0.55, 0.61, 0.7)
yA <- c(0.5, 0.7, 0.3, 0.8, 0.6, 0.4, 0.2)
xT <- c(0.1, xA[4])
yTitle <- c(0.95)
par(mar=c(0, 0, 0, 0))
plot(c(0, 1),c(0.17, 1), type='n', axes=FALSE, xlab='', ylab='')
len <- 0.1
lines(xA[1:3], rep(yA[1],3))
text(xT[1], yA[1], "setup trial", pos=3)
lines(xA[3:4], yA[1:2])
arrows(xA[4], yA[2], xA[5], yA[2], len)
lines(xA[3:4], yA[c(1,3)])
arrows(xA[4], yA[3], xA[5], yA[3], len)
text(xT[2], yTitle, "Reality", cex=1.25, pos=4)
text(xT[2], yA[2]+0.05, "innocent", pos=4)
text(xT[2], yA[3]+0.05, "guilty", pos=4)
lines(xA[6:7], yA[c(2,4)])
arrows(xA[7], yA[4], xA[8], yA[4], len)
lines(xA[6:7], yA[c(2,5)])
arrows(xA[7], yA[5], xA[8], yA[5], len)
lines(xA[6:7], yA[c(3,6)])
arrows(xA[7], yA[6], xA[8], yA[6], len)
lines(xA[6:7], yA[c(3,7)])
arrows(xA[7], yA[7], xA[8], yA[7], len)
text(xA[8], yA[4], "not guilty", pos=4)
text(xA[8], yA[5], "guilty (!)", pos=4)
text(xA[8], yA[6], "not guilty (!!)", pos=4)
text(xA[8], yA[7], "guilty", pos=4)
text(xA[8], yTitle, "Court Ruling", pos=4, cex=1.25)
xA <- c(0, 0.22, 0.22, 0.32, 0.54, 0.55, 0.61, 0.7)
yA <- c(0.5, 0.7, 0.3, 0.8, 0.6, 0.4, 0.2)
xT <- c(0.1, xA[4])
yTitle <- c(0.95)
par(mar=c(0, 0, 0, 0))
plot(c(0, 1),c(0.17, 1), type='n', axes=FALSE, xlab='', ylab='')
len <- 0.1
lines(xA[1:3], rep(yA[1],3))
text(xT[1], yA[1], "setup trial", pos=3)
lines(xA[3:4], yA[1:2])
arrows(xA[4], yA[2], xA[5], yA[2], len)
? lines
xA[3:4]
yA[c(1, 3)]
source('~/.active-rstudio-document')
xA <- c(0, 0.22, 0.22, 0.32, 0.54, 0.55, 0.61, 0.7)
yA <- c(0.5, 0.7, 0.3, 0.8, 0.6, 0.4, 0.2)
xT <- c(0.1, xA[4])
yTitle <- c(0.95)
par(mar=c(0, 0, 0, 0))
plot(c(0, 1),c(0.17, 1), type='n', axes=FALSE, xlab='', ylab='')
len <- 0.1
xA[1:3]
rep(yA[1], 3)
lines(xA[1:2], yA[1])
lines(xA[1:2], rep(yA[1],2))
lines(xA[1:3], rep(yA[1],3))
plot(c(0, 1),c(0.17, 1), type='n', axes=FALSE, xlab='', ylab='')
len <- 0.1
lines(xA[1:3], rep(yA[1],3))
text(xT[1], yA[1], "setup trial", pos=2)
text(xT[1], yA[1], "setup trial", pos=1)
text(xT[1], yA[1], "setup trial", pos=3)
text(xT[1], yA[1], "setup trial", pos=4)
text(xT[1], yA[1], "setup trial", pos=6)
set.seed(2)
x <- exp(c(rnorm(100, log(7.5), 0.15), rnorm(10, log(10), 0.196)))
x <- x - mean(x) + 7.42
histogram(x)
histogram(x, col = alpha('red', 0.5))
histogram(x, col = alpha('red', 0.2))
xyplot(budget ~ rating, data = movies)
xyplot(budget ~ rating | genre, data = movies)
head(movies)
detach('movies')
rm(movies)
movies <- read.csv("~/Desktop/movies.csv")
View(movies)
xyplot(budget ~ rating | genre, data = movies)
xyplot(budget ~ rating | genre + mpaa, data = movies)
xyplot(budget ~ rating, data = movies, group = genre)
xyplot(budget ~ rating, data = movies, group = genre + mpaa)
xyplot(budget ~ rating | mpaa, data = movies, group = genre)
movies_small = subset(movies, length < 180 & votes > 100)
xyplot(budget ~ rating | mpaa, data = movies_small, group = genre)
xyplot(budget ~ rating | mpaa, data = movies_small, group = genre, auto.key = TRUE)
? xyplot
library(mosaic)
? cor
help(package = 'mosaic')
? cor
apropos('correlation')
apropos('corr')
apropos('cor')
dir()
setwd("~/Desktop/R_Projects/slidify")
file.edit('R/slides.R')
file.edit('R/utils.R')
library(devtools)
install(".")
setwd("~/Desktop/R_Projects/slidify/inst/examples")
file.edit('slides.Rmd')
slidify('slides.Rmd')
library(slidify)
slidify('slides.Rmd')
system('open slides.html')
slidify
system('open slides.html')
slidify('slides.Rmd')
slidify('slides.Rmd', histyle = 'zenburn')
slidify('slides.Rmd', histyle = 'solarized_light')
slidify('slides.Rmd', histyle = 'solarized-light')
slidify('slides.Rmd', histyle = 'default', highlighter = 'js')
